---
layout: post
title: 8 Puzzle problem using DFS
date: 2020-10-25 00:00:00 +0300
description: # Add post description (optional)
img: 8puzzle.jpg 
tags: [Algorithms, ArtificialIntelligence, Searching] # add tag
---
The 8-puzzle problem is a puzzle invented and popularized by Noyes Palmer Chapman in the 1870s. It is played on a 3-by-3 grid with 8 square blocks labeled 1 through 8 and a blank square. Your goal is to rearrange the blocks so that they are in order. You are permitted to slide blocks horizontally or vertically into the blank square.

<pre>
| |1|3|      |1|2|3|       | |1|3|      |1|2|3|
|4|2|5|  =>  |4|5|6|   or  |4|2|5|  =>  |8| |4|
|7|8|6|      |7|8| |       |7|8|6|      |7|6|5|
</pre>

The following image shows how one by one trying the moves will result in the answer:
![8puzzle]({{site.baseurl}}/assets/img/8puzzlein.jpg)

The code:

{% highlight java %}
import java.util.*;
public class DFS8Puzzle{
    static ArrayList<Integer> sol1;
    static ArrayList<Integer> sol2;
    static int moves;
    
    static{
        sol1=new ArrayList<Integer>(Arrays.asList(1,2,3,4,5,6,7,8,0)); //0 represents empty space
        sol2=new ArrayList<Integer>(Arrays.asList(1,2,3,8,0,4,7,6,5));
        moves=0;
    }

    public static void main(String args[]) {
        Scanner in=new Scanner(System.in);
        if(args.length<1){
            System.out.println("Usage: command cutOfDepth");
            return;
        }
        ArrayList<Integer> al=new ArrayList<Integer>();
        System.out.println("Enter board configuration");
        for(int i=0;i<9;i++){
            al.add(in.nextInt());
        }
        System.out.println()
        int cutDepth=Integer.parseInt(args[0]);
        
        dfs(al,cutDepth);
        System.out.println("Cannot find solution with this depth.");
    }

    static void dfs(ArrayList<Integer> cur,int cutDepth){
        if(cur.equals(sol1) || cur.equals(sol2)){
            System.out.printf("Solutions found in %d moves\nFinal Configuration\n",moves);
            printBoard(cur);
            System.exit(0);
        }
        int i=cur.indexOf(0)/3,j=cur.indexOf(0)%3;
        //check if UP is possible
        if(i>0){
            ArrayList<Integer> newl=new ArrayList<Integer>(cur);
            swap(newl,i*3+j,(i-1)*3+j);
            moves++;
            if(cutDepth>0)
                dfs(newl,cutDepth-1);
        }
        //check if RIGHT is possible
        if(j<2){
            ArrayList<Integer> newl=new ArrayList<Integer>(cur);
            swap(newl,i*3+j,i*3+(j+1));
            moves++;
            if(cutDepth>0)
                dfs(newl,cutDepth-1);
        }
        //check if DOWN is possible
        if(i<2){
            ArrayList<Integer> newl=new ArrayList<Integer>(cur);
            swap(newl,i*3+j,(i+1)*3+j);
            moves++;
            if(cutDepth>0)
                dfs(newl,cutDepth-1);
        }
        //check if LEFT is possible
        if(j>0){
            ArrayList<Integer> newl=new ArrayList<Integer>(cur);
            swap(newl,i*3+j,i*3+(j-1));
            moves++;
            if(cutDepth>0)
                dfs(newl,cutDepth-1);
        }
    }

    static void printBoard(ArrayList a){
        System.out.println(a.get(0)+" "+a.get(1)+" "+a.get(2));
        System.out.println(a.get(3)+" "+a.get(4)+" "+a.get(5));
        System.out.println(a.get(6)+" "+a.get(7)+" "+a.get(8));
    }
    static void swap(ArrayList<Integer> a,int i, int j){
        int temp=a.get(i);
        a.set(i,a.get(j));
        a.set(j,temp);
    }
}
{% endhighlight %}
